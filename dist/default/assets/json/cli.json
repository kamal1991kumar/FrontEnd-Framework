{
    "status": "",
    "message": "",
    "payload": {
        "data": {
            "cliDoc": "# Installation\nAvizva's UI Framework depends on `avizva-cli` npm module to work. Framework can run without CLI but CLI makes our life easier, you will see how. Since, its use it limited to Avizva, it's not hosted publicly. Rather, it lives on **local npm registry** hosted on office network. Hence, there are few unusual things we need to take care of first to get started.\n### /etc/hosts file\n```bash\nsudo sh -c \"echo '{lan-ip} npm.avizva.com' >> /etc/hosts\"\n```\n### install CLI tool\n```bash\nnpm install --global avizva-cli --registry=npm.avizva.com\n```\n### Commands\n- [avizva-ui](namespace_avizva_ui)\n- [avizva-ui-server](namespace_avizva_ui_server)\n\n***\n## Create a project\n```\navizva-ui init my-project\n```\nHere, `my-project` is project name. This command will create `my-project` folder in current working directory where terminal is open. If you need to keep same project name but choose different directory, use `--dir` flag.\n```\navizva-ui init my-project --dir my-project-dir\navizva-ui init my-project -d my-project-dir\n```\nA `my-project-dir` folder will be created in current working directory. If project folder already exists, then CLI will throw error. To force re-create entire project, use `-f` or `--force` flag.\n```\navizva-ui init my-project -f\n```\nBy default, once project directory is created, CLI installs npm modules. To avoid that, use `--no-install` flag.\n```\navizva-ui init my-project --no-install\n```\nOut of the box, CLI only has `default` platform. To add multiple platforms including `default`, use `-p` or `--platforms` flag.\n```\navizva-ui init my-project -p cordova,ionic\n```\nWe can also use `i` command alias instead of `init`.\n```\navizva-ui i my-project\n```\n***\n## Add platform\nIt may happen that, you forgot to add platform while initializing the project. Or you need a new platform to support difference device. Then you can add platform with below command.\n```\navizva-ui add-platform cordova\n```\nAbove command will add `cordova` platform and setup Webpack config for this new platform. We can also use `p` alias instead of `add-platform` to add new platform.\n```\navizva-ui p cordova\n```\n***\n## Create entity\nAn entity is an element viz. `container` component, `view `component, `hoc`, `service`, `action`, `reducer`, `controller` etc. CLI is equipped with functionality to generate entity file and setting up boilerplate code.\nA entity is created using `avizva-ui create <entity-type> <entity-name>` command. `entity-type` is type of entity like shown above. `entity-name` is name of the entity file to be generated. `entity-name` will also be used to generated export variable from entity file.\nWe can also use `c` alias instead of `create`.\n```\navizva-ui c <entity-type> <entity-name>\n```\nIf an entity file with same name already exists, then CLI will give error. To re-create same entity file, use `-f` or `--force` flag.\n```\navizva-ui create <entity-type> <entity-name> -f\n```\nSome entities like `util`, `action`, `reducer`, `controller` are imported at and exported from `index.js`. To auto export (add export statement) in `index.js` of respective entity folder, use `--export` or `-e` flag. This way, you don't need to manually add an export statement.\n```\navizva-ui create <entity-type> <entity-name> -e\n```\nBy default, whenever we execute above command, a file is generated for `default` platform. A default platform has no extra extension. Hence, you will see only `.js` file. To create separate file for different platform, use `-p` or `--platform` command.\n```\navizva-ui create <entity-type> <entity-name> --platform cordova\n```\nAbove command will create entity file with `.cordova.js` extension. Hence while build of `cordova` platform, `.cordova.js` will get first preference.\nWe can nest a entity inside a sub-folder by providing full path of the entity. Below command will create entity inside `sub/path` folder.\n```\navizva-ui create <entity-type> <sub/path/entity-name>\n```\n#### container\n```\navizva-ui create container MyContainer\navizva-ui create container myContainer --platform cordova\n```\nThis will create two files in `src/components/container/MyContainer.cotainer.js` and `src/components/container/MyContainer.cordova.container.js`.\n#### hoc\n```\navizva-ui create hoc MyHoc\navizva-ui create hoc myHoc --platform cordova\n```\nThis will create two files in `src/components/hoc/myHoc.hoc.js` and `src/components/hoc/myHoc.hoc.cordova.js`.\n#### view\n```\navizva-ui create view myView\navizva-ui create view MyView --platform cordova\n```\nThis will create two files in `src/components/views/myView.view.js` and `src/components/views/myView.view.cordova.js`.\n#### service\n```\navizva-ui create service my-service\navizva-ui create service my-service --template=observable --platform cordova\n```\nThis will create two files in `src/components/services/my-service.service.js` and `src/components/services/my-service.service.cordova.js`.\n`--template` or `-t` flag is used to choose between different templates. `promise` and `observable` are two valid templates available in `service` entity. By default, `promise` template is used which uses `Axios` boilerplate for HTTP requests. `observable` template used `RxJS` boilerplate for HTTP requests.\n#### action\n```\navizva-ui create action user\navizva-ui create action user --platform cordova\n```\nThis will create two files in `src/store/actions/user.action.js` and `src/store/actions/user.action.cordova.js`.\n#### reducer\n```\navizva-ui create reducer user\navizva-ui create reducer user --platform cordova\n```\nThis will create two files in `src/store/reducers/user.reducer.js` and `src/store/reducers/user.reducer.cordova.js`.\n#### controller\n```\navizva-ui create controller MyController\navizva-ui create controller myController --platform cordova\n```\nThis will create two files in `src/controllers/MyController.controller.js` and `src/controllers/MyController.controller.cordova.js`.\n#### util\n```\navizva-ui create util myFunction\n```\nThis will create a utility function file `src/utils/myFunction.util.js`.\n***\n## Run development server\nTo run development serve and preview application, use below command.\n```\navizva-ui serve\n```\nAbove command uses `default` platform and opens browser window on localhost. If you don't want CLI to open browser window, use `--no-open` flag.\n```\navizva-ui serve --no-open\n```\nIn development mode, CSS is not extracted to stylesheets. It is injected inline for faster development and better developer experience. Use `--extract-css` flag to extract CSS using Webpack in development mode.\n```\navizva-ui serve --extract-css\n```\nTo run development server other than `default` platform, use below command. Below command will launch development server for `cordova` platform.\n```\navizva-ui serve cordova\n```\n***\n## Create build for deployment\n```\navizva-ui build\n```\nAbove command uses `default` platform and creates build at `dist/default`. By default, CSS is extracted to stylesheet using Webpack in production mode. To avoid that, use below command.\n```\navizva-ui build --no-extract-css\n```\nTo create build other than `default` platform, use below command. Below command will create build for `cordova` platform at `dist/cordova`.\n```\navizva-ui build cordova\n```\n***\n# Development Server CLI\n```\navizva-ui-server --help\nUsage: avizva-ui-server serve <directory>  [options]\nOptions:\n-V, --version                          output the version number\n-u, --upload [dir]                     Upload folder/directory (local or absolute path) (default: ./upload)\n-p, --port [port]                      Custom port for server (default: null)\n-h, --host [host]                      Host for the server (default: localhost)\n-s, --secure                           Secure host server (https)\n-f, --file-input-name [fileInputName]  File input name (default: file)\n--no-open                              Do not open URL in browser\n-help                                  output usage information\n```\n## Usage\n- `avizva-ui-server serve dist` : Serve `./dist` folder and use `./upload` folder for upload files access/upload.\n- `avizva-ui-server serve dist --no-open` : Do not open browser when server starts.\n- `avizva-ui-server serve dist -p 3000`: Use port `3000` for server instead of default **random available port**.\n- `avizva-ui-server serve dist -h 192.168.0.9` : Use host `192.168.0.9` instead of default `localhost`.\n- `avizva-ui-server serve dist -s` : Use `https://` protocol instead of default `http://` for server.\n- `avizva-ui-server serve dist -f image` : Use `image` as **file input name** in request body instead of default `file`.\n- `avizva-ui-server serve dist -d ./build` : Use `./build` folder as **distribution folder** instead of default `./dist`. This can be absolute path on the system as well, like `/usr/share/build`.\n- `avizva-ui-server serve dist -u ./files` : Use `./files` folder to serve/upload files instead of default `./upload`. This can be absolute path on the system as well, like `/usr/share/files`.\n## API Access\n- GET `/file.ext` path on server URL will serve `file.ext` file from **distribution folder**.\n- GET `/folder/file.ext` path on server URL will server `file.ext` from `folder` directory inside **distribution folder**.\n- Server will add appropriate header while serving these files. For example, GET `/json/users.json` will serve `users.json` from `json` directory with `application/json` Content-Type response header.\n- GET `/upload/file.ext` will serve `file.ext` file from **upload folder**.\n- POST `/upload` route is used to upload a file. Make sure to use correct file input name while uploading a file to this route. This is key in your multipart form data. When you start a server, **upload folder** is automatically created if doesn't exist.\n## Websockets\n`v1.0.4+` supports websocket on the same port of web server. Default ping-pong event is `message`. Use [Online client tool](http://amritb.github.io/socketio-client-tool) to test websocket functionality. Use `http://localhost:{port}` as **socket.io** server URL."
        },
        "meta": {},
        "selected": {}
    }
}