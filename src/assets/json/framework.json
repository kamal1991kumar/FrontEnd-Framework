{
    "status": "",
    "message": "",
    "payload": {
        "data": {
            "cliDoc": {
                "frameworkOverview": {
                    "title": "Framework Overview",
                    "markdown": "### Platform\nThis framework is written in JavaScript and compiles on Node. So if you haven't installed node.js on your system, you can install it from [nodejs.org](https://nodejs.org/en/). Like other modern frameworks, this framework is written in ES2015+ / SASS (`.scss`) and uses Webpack (babel + node-sass) to transpile them to cross-browser code.\n### Core Modules\n- \"**axios**\": \"\\^0.18.0\"\n- \"axios-cancel\": \"\\^0.2.2\"\n- \"config\": \"\\^1.30.0\"\n- \"lodash\": \"\\^4.17.10\"\n- \"**react**\": \"\\^16.4.0\"\n- \"react-dom\": \"\\^16.4.0\"\n- \"react-loadable\": \"\\^5.4.0\"\n- \"react-redux\": \"\\^5.0.7\"\n- \"**react-router-dom**\": \"\\^4.2.2\"\n- \"react-router-server\": \"\\^4.2.3\"\n- \"**redux**\": \"\\^4.0.0\"\n- \"redux-thunk\": \"\\^2.3.0\"\n- \"**rxjs**\": \"\\^6.2.0\"\n### Development modules\n- \"autoprefixer\": \"\\^8.6.0\"\n- \"**babel-core**\": \"\\^6.26.3\"\n- \"babel-eslint\": \"\\^8.2.3\"\n- \"babel-loader\": \"\\^7.1.4\"\n- \"babel-minify-webpack-plugin\": \"\\^0.3.1\"\n- \"babel-plugin-syntax-dynamic-import\": \"\\^6.18.0\"\n- \"babel-plugin-transform-class-properties\": \"\\^6.24.1\"\n- \"babel-plugin-transform-decorators-legacy\": \"\\^1.3.5\"\n- \"babel-plugin-transform-object-rest-spread\": \"\\^6.26.0\"\n- \"babel-preset-env\": \"\\^1.7.0\"\n- \"babel-preset-react\": \"\\^6.24.1\"\n- \"clean-webpack-plugin\": \"\\^0.1.19\"\n- \"config-webpack\": \"\\^1.0.4\"\n- \"copy-webpack-plugin\": \"\\^4.5.1\"\n- \"css-loader\": \"\\^0.28.11\"\n- \"**eslint**\": \"\\^4.19.1\"\n- \"eslint-friendly-formatter\": \"\\^4.0.1\"\n- \"eslint-loader\": \"\\^2.0.0\"\n- \"eslint-plugin-react\": \"\\^7.9.1\"\n- \"glob\": \"\\^7.1.2\"\n- \"html-webpack-plugin\": \"\\^3.2.0\"\n- \"json-server\": \"\\^0.13.0\"\n- \"mini-css-extract-plugin\": \"\\^0.4.0\"\n- \"**node-sass**\": \"\\^4.9.0\"\n- \"postcss-loader\": \"\\^2.1.5\"\n- \"sass-loader\": \"\\^7.0.2\"\n- \"shortid\": \"\\^2.2.8\"\n- \"style-loader\": \"\\^0.21.0\"\n- \"**webpack**\": \"\\^4.10.2\"\n- \"webpack-cli\": \"\\^3.0.2\"\n- \"**webpack-dev-server**\": \"\\^3.1.4\"\n- \"webpack-merge\": \"\\^4.1.2\""
                },
                "webpack": {
                    "title": "Webpack",
                    "markdown": "Webpack needs a dedicated wiki page because it's the load lifter of the entire framework. We have configured and optimized webpack for faster development time, optimized build and support for multi-platform deployment.\n## Merge webpack config\nThis framework uses different webpack configuration and dynamically generate a final configuration object using [`webpack-merge`](https://github.com/survivejs/webpack-merge) npm module. With `webpack-merge`, we can also provide functional values to webpack configuration.\n## Optimization\nInstead of using same configuration for development and production, we have `webpack.config.js` configured in a way that it uses minimal plugins in development to give better development experience. Based on `NODE_ENV` and other environment variables, most of the plugins take `null` value but since, `null` is not a valid Webpack plugin, we use `filer` on `plugins` array and filter out `null` plugins.\n## Configurations\n### üìÅ webpack.config.extra.js\nThis file contains variable webpack configuration such as **import aliases** which might need to modified on regular basis. Any dynamic and project related webpack configuration should go in here.\n### üìÅ .platforms/\n`{platform}.webpack.config.js` are the files which webpack will import to load platform dependent configuration. `.platform` folder is created by the CLI and it is advised, not to modify files or content of the files in this folder.\n### üìÅ webpack.config.js\nThis is main configuration file for webpack. This is where all magic happens. This file imports other configurations from `webpack.config.extra.js` and `.platforms/`. Based on environment variable and/or CLI commands, `webpack.config.js` dynamically exports final configuration object which webpack consumes.\n- **Optimization mode (_mode_)** : Webpack is in `production` mode when `NODE_ENV` environment variable is `production` and for other values, it's in `development` mode.\n- **Entry files (_entry_)** : `./src/index.js` and `./src/scss/index.scss` are two entry files for webpack. Hence, if a file is not imported in one of these files or its import tree, it won't be present in final build.\n- **Build output (_output_)** : Build files are deployed in `dist/{platform}` folder. Here, since build is platform dependent, build files will be deployed in platform name folder. Every project contains a `default` platform. If a platform is not provided while build, `default` is used instead. A typical build folder contains `.html` files, `.js` files, `.css` files and static assets distributed in separate folders. You will learn more about this in project structure lesson.\n- **Soucemaps ([_devtool_](https://webpack.js.org/configuration/devtool/))** : When `NODE_ENV` environment variable is `production`, we are using `source-map` devtool, while in other cases, we are using `cheap-module-eval-source-map` for faster development.\n- **Webpack dev server (_devServer_)** : For single-page application development, `historyApiFallback` is set to `true` and browser auto-open `open` to `true`.\n- **Loaders (_module_)**\n- **eslint-loader** : We are using es-lint loader for eslint linting tool. Webpack first checks for any linting errors in `.js` files and then send them to next loader.\n- **babel-loader** : babel-loader is used to implement babel for `.js` or `.jsx` transpilation.\n- **sass-loader** : sass-loader along with `postcss-loader`, `css-loader`, `style-loader` is used to transpile sass (_`.scss`_) files. Depending on `CSS_MODE` environment variable, webpack can either use `style-loader` for faster development or `MiniCSSExtractPlugin.loader` to extract css to separate files. By default, `CSS_MODE` is `inline`, hence `style-loader` is used.\n- **File resolution (_resolve_)** : By default, webpack only resolves `.scss`, `.css`, and `.json` files. `.js`, `.jsx` file resolution configurations are imported from `./platform` webpack configuration. `alias` are imported from `webpack.config.extra.js` file.\n- **Code splitting (_optimization.splitChunks_)** : Webpack 4 internally implements [`SplitChunksPlugin`](https://webpack.js.org/plugins/split-chunks-plugin/). Chunk splitting is defined in `optimization.splitChunks` object. `cacheGroups` object defines configurations for different chunks. By default, webpack ships with `default` and `vendors` chunk configurations which we set to `false`, as we don't need them. `vendor` chunk contains files imported from `node_modules` and `src/js/vendor` folders. `common` chunk contains files imported synchronously inside other chunks more than **2 times**. Any asynchronously imported files (_imported with `import()` function_) does not belong to any defined chunks, hence webpack creates their own independent chunks. With this configuration, we are creating `main.js` (_default name webpack uses to build entry file_), `vendor.js` (_chunk_), `common.js` (_chunk_) and other `{asyncChunkName}.js` files. Using `webpack.NamedChunksPlugin`, we are setting output name and location for these chunk files. If you want to read more about **code splitting** and **lazy loading with React Router**, [read this article on medium](https://itnext.io/react-router-and-webpack-v4-code-splitting-using-splitchunksplugin-f0a48f110312).\n- **Plugins (_plugins_)**\n- **HTMLWebpackPlugin** : Compiles `.html` files from `src/pages/` folder and deploys to `dist/{platform}` build folder. Any html file starting with `test.` prefix will not be a part of deployment. Using this plugins, webpack build `.js` and `.scss` files are injected into html files as dependencies.\n- **CopyWebpackPlugin** : Recursively copies files from `src/assets` folder and deploys to `dist/{platform}/build` build folder.\n- **MiniCSSExtractPlugin** : When `CSS_MODE` environment variable is not `inline`, this plugin extract CSS code from JavaScript bundle and creates `style.css` which is deployed in `dist/{platform}/css` build folder.\n- **webpack.NamedChunksPlugin**: This plugin is used to rename JavaScript chunk files. `shortid` npm module is used to create random file names for async chunks (_modules imported with `import()` function_). Rest chunks names are kept the same, as they were defined in `splitChunks`. All async chunks are deployed in `dist/{platform}/js/chunks` folder of platform build.\n- **CleanWebpackPlugin** : This plugin is used to clean chunks files situated in `dist/{platform}/js/chunks/` before new build.\n- **ConfigWebpackPlugin**: This plugin is used to implement [**node-config**](https://github.com/lorenwest/node-config) within webpack. Based on `NODE_ENV` environment variable, `node-config` picks a `json` file from `./config/` folder and webpack injects into `CONFIG` global variable. Hence `CONFIG` is available everywhere in the project and based on build environment, values will be different."
                },
                "fileFolderStructure": {
                    "title": "File/Folder structure",
                    "markdown": "```\n‚îú‚îÄ‚îÄ .platforms/\n‚îú‚îÄ‚îÄ src/\n|  ‚îú‚îÄ‚îÄ index.js\n|  ‚îú‚îÄ‚îÄ assets/\n|  |  ‚îú‚îÄ‚îÄ files/\n|  |  ‚îú‚îÄ‚îÄ fonts/\n|  |  ‚îú‚îÄ‚îÄ images/\n|  |  ‚îú‚îÄ‚îÄ json/\n|  |  ‚îî‚îÄ‚îÄ favicon.ico\n|  ‚îú‚îÄ‚îÄ js/\n|  |  ‚îú‚îÄ‚îÄ core/\n|  |  |  ‚îú‚îÄ‚îÄ constants/\n|  |  |  ‚îú‚îÄ‚îÄ utils/\n|  |  |  ‚îú‚îÄ‚îÄ modules/\n|  |  |  ‚îî‚îÄ‚îÄ hoc/\n|  |  ‚îú‚îÄ‚îÄ animations/\n|  |  ‚îú‚îÄ‚îÄ components/\n|  |  |  ‚îú‚îÄ‚îÄ containers/\n|  |  |  ‚îî‚îÄ‚îÄ hoc/\n|  |  ‚îú‚îÄ‚îÄ constants/\n|  |  ‚îú‚îÄ‚îÄ controllers/\n|  |  ‚îú‚îÄ‚îÄ models/\n|  |  ‚îú‚îÄ‚îÄ router/\n|  |  ‚îú‚îÄ‚îÄ services/\n|  |  ‚îú‚îÄ‚îÄ store/\n|  |  ‚îú‚îÄ‚îÄ utils/\n|  |  ‚îú‚îÄ‚îÄ vendors/\n|  |  ‚îî‚îÄ‚îÄ views/\n|  ‚îú‚îÄ‚îÄ pages/\n|  |  ‚îú‚îÄ‚îÄ index.html\n|  |  ‚îî‚îÄ‚îÄ about.html\n|  ‚îî‚îÄ‚îÄ scss/\n|     ‚îú‚îÄ‚îÄ base/\n|     ‚îú‚îÄ‚îÄ components/\n|     ‚îú‚îÄ‚îÄ modules/\n|     ‚îú‚îÄ‚îÄ fonts/\n|     ‚îú‚îÄ‚îÄ layout/\n|     ‚îú‚îÄ‚îÄ theme/\n|     ‚îú‚îÄ‚îÄ utilities/\n|     ‚îî‚îÄ‚îÄ index.scss\n‚îú‚îÄ‚îÄ dist/\n|  ‚îú‚îÄ‚îÄ cordova/\n|  |  ‚îú‚îÄ‚îÄ assets/\n|  |  ‚îú‚îÄ‚îÄ css/\n|  |  ‚îú‚îÄ‚îÄ js/\n|  |  ‚îú‚îÄ‚îÄ json/\n|  |  ‚îú‚îÄ‚îÄ index.html\n|  |  ‚îî‚îÄ‚îÄ about.html\n|  ‚îî‚îÄ‚îÄ default/\n|     ‚îú‚îÄ‚îÄ assets/\n|     ‚îú‚îÄ‚îÄ css/\n|     ‚îú‚îÄ‚îÄ js/\n|     ‚îú‚îÄ‚îÄ json/\n|     ‚îú‚îÄ‚îÄ index.html\n|     ‚îî‚îÄ‚îÄ about.html\n‚îú‚îÄ‚îÄ config/\n|  ‚îú‚îÄ‚îÄ default.json\n|  ‚îú‚îÄ‚îÄ development.json\n|  ‚îî‚îÄ‚îÄ production.json\n‚îú‚îÄ‚îÄ .gitignore\n‚îú‚îÄ‚îÄ .eslintrc.js\n‚îú‚îÄ‚îÄ .esdoc.json\n‚îú‚îÄ‚îÄ .eslintignore\n‚îú‚îÄ‚îÄ .babelrc\n‚îú‚îÄ‚îÄ postcss.config.js\n‚îú‚îÄ‚îÄ env.js\n‚îú‚îÄ‚îÄ webpack.config.extra.js\n‚îú‚îÄ‚îÄ webpack.config.js\n‚îú‚îÄ‚îÄ jsconfig.json\n‚îú‚îÄ‚îÄ cli.config.json\n‚îú‚îÄ‚îÄ package-lock.json\n‚îî‚îÄ‚îÄ package.json\n```\n***\n### Environment config > config/\nThis folder contains `{NODE_ENV}.json` files. Based on current `NODE_ENV` variable, Webpack's `ConfigWebpackPlugin` picks up the `{NODE_ENV}.json` file and injects in global variable `CONFIG`. `CONFIG` global variable is accessible everywhere in the project. Using these files, we can maintain environment dependent data like **_API endpoints_**. A `default.json` is must have in case `NODE_ENV` environment variable is not provided which can be same as `development.json`.\n***\n### Git > .gitignore\nThis is a standard file which ignores files and folders from being added to Git commits. Folders like `node_modules` and `build` is not necessary to be added to code repository as they can be easily duplicated on any system. This framework gives, out of the box `.gitignore` file with some common ignored paths. Please consult **Avizva UI** team before making any changes to this file. [**Read more about .gitignore**](https://www.atlassian.com/git/tutorials/saving-changes/gitignore).\n***\n### JS Linting tool > .eslintrc.js\nThis file contains rule-set of [**ESLint**](https://eslint.org/). ESLint is a toolkit to maintain consistent code writing pattern. Webpack's `eslint-loader` uses this file to throw compilation error if a JavaScript syntax doesn't comply with rule-set of this file. We can ignore files or folder being tested by `ESLint` by adding them to `.eslintignore`. Format of `.eslintignore` is same as `.gitignore`. You are not allowed to modify this file as it contains standard rules used by **Avizva UI** team.\n***\n### Documentation > .esdoc.json\nThis file contains rule-set of [**ESDoc**](https://esdoc.org/). ESDoc is a command line tool to create documentation from source code of the project. Using command `npm run docs`, you can generate documentation in `docs` folder.\n***\n### ES2015+ Transpilation > .babelrc\nThis file contains `plugins` and `presets` for Babel. Babel is a loader used by Webpack to transform ES2015+ JavaScript code to native cross-browser ES5 code. [**Read more about .babelrc**](https://babeljs.io/docs/en/babelrc/).\n***\n### CSS optimization > postcss.config.js\nThis file contains configuration for [**PostCSS**](https://postcss.org/). PostCSS is a toolkit for transforming and optimizing CSS, for example, adding vendor-prefixes to CSS properties or minifying CSS code. PostCSS is used with Webpack through `postcss-loader`.\n***\n### CLI configuration > cli.config.json\nThis file is created by `avizva-cli` and it contains **CLI configuration** for the project. It is advised not to tamper this file but one can change configuration (_with consultation of UI team_) to modify CLI behavior toward a project.\n***\n### Editor intellisense > jsconfig.json\nThis file is used by code editors like **VSCode** to provide path intellisense. As this framework uses **Webpack alias** to make imports easier, code editors can not resolve a file when a variable is imported from an alias. `jsconfig.json` helps editor map a particular alias with file or folder on local file system. Whenever a alias is added in `webpack.config.extra.js`, it is **mandatory** to add same alias in `jsconfig.json` file.\n***\n### Environment variables > env.js\nThis file contains environment variable which will be automatically available inside project. Make sure, not to override `NODE_ENV` and `CSS_MODE` environment variables as they are provided by `avizva-cli`.\n***\n## Other Files\n- [.platforms/](Framework~webpack#configurations)\n- [webpack.config.extra.js](Framework~webpack#configurations)\n- [webpack.config.js](Framework~webpack#configurations)\n- [src/](Framework~source)\n- [dist/](Framework~distribution)"
                },
                "sourceFiles": {
                    "title": "Source files",
                    "markdown": "```\n‚îú‚îÄ‚îÄ src/\n|  ‚îú‚îÄ‚îÄ index.js\n|  ‚îú‚îÄ‚îÄ assets/\n|  |  ‚îú‚îÄ‚îÄ files/\n|  |  ‚îú‚îÄ‚îÄ fonts/\n|  |  ‚îú‚îÄ‚îÄ images/\n|  |  ‚îú‚îÄ‚îÄ json/\n|  |  ‚îî‚îÄ‚îÄ favicon.ico\n|  ‚îú‚îÄ‚îÄ js/\n|  |  ‚îú‚îÄ‚îÄ core/\n|  |  |  ‚îú‚îÄ‚îÄ constants/\n|  |  |  ‚îú‚îÄ‚îÄ utils/\n|  |  |  ‚îú‚îÄ‚îÄ modules/\n|  |  |  ‚îî‚îÄ‚îÄ hoc/\n|  |  ‚îú‚îÄ‚îÄ animations/\n|  |  ‚îú‚îÄ‚îÄ components/\n|  |  |  ‚îú‚îÄ‚îÄ containers/\n|  |  |  ‚îî‚îÄ‚îÄ hoc/\n|  |  ‚îú‚îÄ‚îÄ constants/\n|  |  ‚îú‚îÄ‚îÄ controllers/\n|  |  ‚îú‚îÄ‚îÄ models/\n|  |  ‚îú‚îÄ‚îÄ router/\n|  |  ‚îú‚îÄ‚îÄ services/\n|  |  ‚îú‚îÄ‚îÄ store/\n|  |  ‚îú‚îÄ‚îÄ utils/\n|  |  ‚îú‚îÄ‚îÄ vendors/\n|  |  ‚îî‚îÄ‚îÄ views/\n|  ‚îú‚îÄ‚îÄ pages/\n|  |  ‚îú‚îÄ‚îÄ index.html\n|  |  ‚îî‚îÄ‚îÄ about.html\n|  ‚îî‚îÄ‚îÄ scss/\n|     ‚îú‚îÄ‚îÄ base/\n|     ‚îú‚îÄ‚îÄ components/\n|     ‚îú‚îÄ‚îÄ modules/\n|     ‚îú‚îÄ‚îÄ fonts/\n|     ‚îú‚îÄ‚îÄ layout/\n|     ‚îú‚îÄ‚îÄ theme/\n|     ‚îú‚îÄ‚îÄ utilities/\n|     ‚îî‚îÄ‚îÄ index.scss\n```\n`src` folder contains source code of entire project. Whatever lies outside this folder is strictly related to the framework. Hence you will spend most of your time working with this folder only.\n`src` folder contains `index.js` which is entry point of the Webpack. Out of the box, this file contains application bootstrap logic and imports which should be present in the distribution file. `src` is majorly consist of `assets`, `js` and `scss` files.\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n# üìÅ Static Assets\n```\n‚îú‚îÄ‚îÄ assets/\n|  |  ‚îú‚îÄ‚îÄ files/\n|  |  ‚îú‚îÄ‚îÄ fonts/\n|  |  ‚îú‚îÄ‚îÄ images/\n|  |  ‚îú‚îÄ‚îÄ json/\n|  |  ‚îî‚îÄ‚îÄ favicon.ico\n```\n`assets` folder contains static assets which will be deployed with the distribution files. Every `{platform}` build will have separate `assets` folder. Webpack will copy entire `assets` folder and paste `as-is` with the distribution. Hence, it is advised to remove stale/unnecessary files before running build task.\n`assets` folder is deployed in the parent directory of `{platform}` distribution. Hence it is recommended to use `/assets/../../file.ext` like absolute paths while referencing an asset file in SCSS or HTML.\n`json` folder contains `.json` files which can be used by `good-server` to create read-only JSON API. To preview a `{platform}` distribution with `good-server`, run command `good-server -d dist/{platform}` or `avizva-ui preview {platform}` which will open browser window automatically at a random port. [**Good server**](https://gitlab.com/thatisuday/cli-good-server) is CLI tool built by **Avizva UI team** to launch a static HTTP server with read-only JSON API and web-socket server.\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n# üìÅ HTML Pages\n```\n|  ‚îú‚îÄ‚îÄ pages/\n|  |  ‚îú‚îÄ‚îÄ index.html\n|  |  ‚îî‚îÄ‚îÄ about.html\n```\n`pages` folder contains `HTML` pages. If you have a single page application, then you only need `index.html`. All pages use same distribution `.js` and `.css` files hence **Controller** modules is used to decides which component to bootstrap for individual pages.  If you need to avoid a `.html` pages from going into to distribution, add `test.` prefix like `test.about.html` to the filename.\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n# üìÅ CSS Styles\n```\n|  ‚îî‚îÄ‚îÄ scss/\n|     ‚îú‚îÄ‚îÄ base/\n|     ‚îú‚îÄ‚îÄ components/\n|     ‚îú‚îÄ‚îÄ modules/\n|     ‚îú‚îÄ‚îÄ fonts/\n|     ‚îú‚îÄ‚îÄ layout/\n|     ‚îú‚îÄ‚îÄ theme/\n|     ‚îú‚îÄ‚îÄ utilities/\n|     ‚îî‚îÄ‚îÄ index.scss\n```\n`scss` folder contains project `.scss` (CSS) files. We recommend structuring your CSS with [**SMACSS**](https://smacss.com/) architecture and write CSS classnames with [**BEM**](http://getbem.com/) methodology. You must follow these two approaches while writing CSS in this framework.\nAs per **SMACSS**, `.scss` files are divided into below categories.\n- **base/** : This folder contains `.scss` files which represent core styles of the entire project. Filename should end with suffix `.base.scss`.\n- **component/** : This folder contains React.js container (component) related `.scss` files. Filename should end with suffix `.component.scss`. This folder also contains styles for native JavaScript web-components.\n- **modules/** : This folder contains React.js view (component) related `.scss` files. Filename should end with suffix `.module.scss`. This folder also contains styles for native JavaScript or CSS modules.\n- **fonts/** : This folder contains font-family related `.scss` files. Font files of a font-family is located in `assets/fonts` and absolute path like `/assets/fonts/../file.otf` should be used inside `.font.scss` files.\n- **layout/** : This folder contains CSS layout related `.scss` files. Filename should end with suffix `.layout.scss`.\n- **theme/** : This folder contains theme related `.scss` files. Filename should end with suffix `.theme.scss`.\n- **utilities/** : This folder contains utilities related `.scss` files. Filename should end with suffix `.utility.scss`.\nAll above folders should contain an `index.scss` file which `scss/index.scss` imports. `scss/index.scss` is entry point of Webpack as well. Hence, you don't need to import `scss/index.scss` file anywhere in your JavaScript.\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n# üìÇ JavaScript\n```\n|  ‚îú‚îÄ‚îÄ js/\n|  |  ‚îú‚îÄ‚îÄ core/\n|  |  |  ‚îú‚îÄ‚îÄ constants/\n|  |  |  ‚îú‚îÄ‚îÄ utils/\n|  |  |  ‚îú‚îÄ‚îÄ modules/\n|  |  |  ‚îî‚îÄ‚îÄ hoc/\n|  |  ‚îú‚îÄ‚îÄ animations/\n|  |  ‚îú‚îÄ‚îÄ components/\n|  |  |  ‚îú‚îÄ‚îÄ containers/\n|  |  |  ‚îî‚îÄ‚îÄ hoc/\n|  |  ‚îú‚îÄ‚îÄ constants/\n|  |  ‚îú‚îÄ‚îÄ controllers/\n|  |  ‚îú‚îÄ‚îÄ models/\n|  |  ‚îú‚îÄ‚îÄ router/\n|  |  ‚îú‚îÄ‚îÄ services/\n|  |  ‚îú‚îÄ‚îÄ store/\n|  |  ‚îú‚îÄ‚îÄ utils/\n|  |  ‚îú‚îÄ‚îÄ vendors/\n|  |  ‚îî‚îÄ‚îÄ views/\n```\n`js` folder contains `.js` (JavaScript) files. These files are divided among various folders depending on their role.\n## ‚Ü≥ js/core\nThis folder contains core (provided by framework) modules. You can use these modules to enhance your custom modules or elements. All core modules are [explained here](Framework~core).\n## ‚Ü≥ js/animations\nThis folder contains `.js` files related to the animations. Filename should end with suffix `.animation.js`.\n##### import statements\n```js\nimport { name } from 'animations/name.animation'\n```\n<br/>\n## ‚Ü≥ js/components\n```\n|  |  |  ‚îú‚îÄ‚îÄ containers/\n|  |  |  |  ‚îî‚îÄ‚îÄ MyContainer.container.jsx\n|  |  |  |  ‚îî‚îÄ‚îÄ MyContainer.container.cordova.jsx\n|  |  |  ‚îî‚îÄ‚îÄ hoc/\n|  |  |  |  ‚îî‚îÄ‚îÄ myHoc.hoc.jsx\n|  |  |  |  ‚îî‚îÄ‚îÄ myHoc.hoc.cordova.jsx\n```\nThis folder contains `containers` and `hoc` sub-folders. `containers/` contains `.jsx` files related to `React` container components and filename should end with suffix `.container.jsx`. `hoc/` contains `.jsx` files related to `React` **_higher order component_** and filename should end with suffix `.hoc.jsx`.\nA `container` file should have **TitleCase** filename and exported class name while `hoc` file should have **camelCase** filename and exported function name.\n##### Init boilerplate\n```bash\navizva-ui create container MyContainer\navizva-ui create container MyContainer --platform=cordova\navizva-ui create hoc myHoc\n```\n##### Import statement(s)\n```js\nimport { MyContainer } from 'animations/MyContainer.container'\nimport { myHoc } from 'animations/myHoc.hoc\n```\n<br/>\n## ‚Ü≥ js/constants\n```\n|  |  ‚îú‚îÄ‚îÄ constants/\n|  |  |  ‚îú‚îÄ‚îÄ strings.js\n|  |  |  ‚îî‚îÄ‚îÄ index.js\n```\nThis folder contains constants used throughout the project. This folder should have an `index.js` file which exports all the constants. It is recommended to separate constants in different files and re-export them through `index.js`.\n##### Import statement(s)\n```js\nimport { MY_CONSTANT } from 'constants'\n```\n<br/>\n## ‚Ü≥ js/controllers\n```\n|  |  |  ‚îú‚îÄ‚îÄ controllers/\n|  |  |  |  ‚îú‚îÄ‚îÄ MyController.controller.jsx\n|  |  |  |  ‚îî‚îÄ‚îÄ MyController.controller.cordova.jsx\n```\nThis folder contains controller files. A controller is used to auto-bootstrap a component inside a div. This is necessary in case of `multi-page` application since all pages share same JavaScript bundles. To render a component inside given `div` having attribute `data-controller=\"MyController\"`, `MyController.controller.js` files should be present in controllers.\n##### Init boilerplate\n```bash\navizva-ui create controller MyController\navizva-ui create controller MyController --export\navizva-ui create controller MyController --platform=cordova\n```\n##### Import statement(s)\nYou do not need to import a controller. All controllers are imported in `js/core/bootstrap.js` file and controllers are initialized with bootstrap process of the application. If you use `--export` flag, an export statement for newly created controller will be automatically added to `js/controllers/index.js` file.\n<br/>\n## ‚Ü≥ js/models\n```\n|  |  |  ‚îú‚îÄ‚îÄ models/\n|  |  |  |  ‚îî‚îÄ‚îÄ MyModel.model.js\n```\nThis folder contains JavaScript models. Filename should end with suffix `.model.js`.\n#### ‚Ü£ Import statement(s)\n```js\nimport { MyModel } from 'models/MyModel.model'\n```\n<br/>\n## ‚Ü≥ js/router\n```\n|  |  ‚îú‚îÄ‚îÄ router/\n|  |  |  ‚îú‚îÄ‚îÄ router.config.js\n|  |  |  ‚îî‚îÄ‚îÄ index.js\n```\nThis folder contains `router.config.js` and `index.js` file. These files provide React Router v4 based routing functionality. `index.js` file exports `RenderRoutes` component which is used to render component based on current path. `router.config.js` is tree-like configuration for entire router of the application used by `RenderRoutes`.\n##### Import statement(s)\n```js\nimport { RenderRoutes } from 'router'\n```\n<br/>\n## ‚Ü≥ js/services\n```\n|  |  ‚îú‚îÄ‚îÄ services/\n|  |  |  ‚îî‚îÄ‚îÄ user.service.js\n|  |  |  ‚îî‚îÄ‚îÄ user.service.codova.js\n```\nServices are `HTTP` request function bundles. A service filename should be as simple as possible and should end with `.service.js` suffix. Service boilerplate is created using `avizva-cli` and supports both `Promise` or `Observable` based response.\n##### Init boilerplate\n```bash\navizva-ui create service user --type=promise\navizva-ui create service user --type=observable\navizva-ui create service user --platform=cordova (default: promise)\n```\n##### Import statement(s)\n```js\nimport { getUsers } from 'services/users.service'\n```\n<br/>\n## ‚Ü≥ js/store\n```\n|  |  ‚îú‚îÄ‚îÄ store/\n|  |  |  ‚îú‚îÄ‚îÄ actions/\n|  |  |  |  ‚îú‚îÄ‚îÄ user.action.js\n|  |  |  |  ‚îî‚îÄ‚îÄ index.js\n|  |  |  ‚îú‚îÄ‚îÄ reducers/\n|  |  |  |  ‚îú‚îÄ‚îÄ user.reducer.js\n|  |  |  |  ‚îî‚îÄ‚îÄ index.js\n|  |  |  ‚îî‚îÄ‚îÄ index.js\n```\n`store` contains state and state management logic of the application. `index.js` of `store` exports `getStore` function which returns a function to create new store with initial state.\n`actions` folder contains an action file which exports a function to create redux action object. It is advised to re-export actions functions from `index.js`. Redux action filename should end with suffix `.action.js`.\n`reducers` folder contains redux reducers and there filename should end with suffix `.reducer.js`.\n##### Init boilerplate\n```bash\navizva-ui create action user\navizva-ui create reducer user\n```\n##### Import statement(s)\n```js\nimport { addUserAction } from 'store/actions'\nimport { getStore } from 'store'\n```\n<br/>\n## ‚Ü≥ js/utils\n```\n|  |  ‚îú‚îÄ‚îÄ utils/\n|  |  |  ‚îú‚îÄ‚îÄ transform-case.js\n|  |  |  ‚îî‚îÄ‚îÄ index.js\n```\nThis folder contains utility functions used throughout the project. This folder should have an `index.js` file which exports all the utility functions. It is recommended to separate utility functions in different files and re-export them through `index.js`.\n##### Import statement(s)\n```js\nimport { toTitleCase } from 'utils'\n```\n<br/>\n## ‚Ü≥ js/vendor\n```\n|  |  |  ‚îú‚îÄ‚îÄ vendor/\n|  |  |  |  ‚îî‚îÄ‚îÄ Gallery.vendor.js\n```\nThis folder contains 3rd party modules/libraries with custom modifications. Filename of a vendor file should end with `.vendor.js` suffix.\n##### Import statement(s)\n```js\nimport 'vendor/Gallery.vendor'\nimport { Gallery } from 'vendor/Gallery.vendor'\n```\n<br/>\n## ‚Ü≥ js/views\n```\n|  |  |  ‚îú‚îÄ‚îÄ components/\n|  |  |  |  ‚îî‚îÄ‚îÄ MyView.view.jsx\n|  |  |  |  ‚îî‚îÄ‚îÄ MyView.view.cordova.jsx\n```\nThis folder contains React views. Filename of the view should be in **camelCase** and should end with suffix `view.jsx`.\n##### Init boilerplate\n```bash\navizva-ui create view MyView\navizva-ui create view MyView --platform=cordova\n```\n##### Import statement(s)\n```js\nimport { MyView } from 'animations/MyView.view'\n```"
                },
                "distributionFiles": {
                    "title": "Distribution files",
                    "markdown": "```\n‚îú‚îÄ‚îÄ dist/\n|  ‚îú‚îÄ‚îÄ cordova/\n|  |  ‚îú‚îÄ‚îÄ assets/\n|  |  ‚îú‚îÄ‚îÄ css/\n|  |  ‚îú‚îÄ‚îÄ js/\n|  |  ‚îú‚îÄ‚îÄ json/\n|  |  ‚îú‚îÄ‚îÄ index.html\n|  |  ‚îî‚îÄ‚îÄ about.html\n|  ‚îî‚îÄ‚îÄ default/\n|     ‚îú‚îÄ‚îÄ assets/\n|     ‚îú‚îÄ‚îÄ css/\n|     ‚îú‚îÄ‚îÄ js/\n|     ‚îú‚îÄ‚îÄ json/\n|     ‚îú‚îÄ‚îÄ index.html\n|     ‚îî‚îÄ‚îÄ about.html\n```\n`dist` folder contains distribution files of each platform. When we build project with `avizva-cli` using command `avizva-ui build`, `default` platform is chosen by default. Hence, only `.js` files are resolved in `import` statement and build files are exported in `dist/default` folder.\nWhen we mention a platform in build command, `avizva-ui build cordova`, build is initiated for `cordova` platform and files with suffix `.cordova.js` get more preferences than `.js` files in `import` statements. If `xyz.cordova.js` file is missing, then `xyz.js` file is used instead. Hence, it's not necessary to have files for all the platforms. This way, all platforms can share same file.\nTo see preview of a platform build with default system browser, run command `avizva-ui preview` which will serve files from `dist/default`. To see preview of a platform build other than `default`, use command `avizva-ui preview cordova` which will serve files from `dist/cordova`. [**good-server**](https://gitlab.com/thatisuday/cli-good-server) CLI tool is used `avizva-cli` to launch these previews."
                },
                "CLICommands": {
                    "title": "CLI commands",
                    "markdown": "This framework can be operated by Avizva CLI tool and we recommend to initialize a project with Avizva CLI. Using Avizva CLI, you can create controllers components, services, actions, reducers and more with standard boilerplate. Using CLI, you can develop and deploy multi-platform projects with ease.\n[To download and install, click here.](https://gitlab.com/thatisuday/cli-avizva/wikis/home)\n***\nThough, CLI is not necessary to use this framework, it's mandatory at Avizva to use CLI tool. If you had to use framework without CLI, we recommended you to clone latest release branch and use `npm run start` and `npm run build` command to run and build project.\nBelow are environment variable to consider\n- `WDS_EXTRACT_CSS` :  Extract CSS to external stylesheet. Default value is `false`, use `true` to enable it. Use => `WDS_EXTRACT_CSS=true npm run build`\n- `WDS_OPEN` : Open browser window for webpack development server. Default value `false`, use `true` to enable it. Use => `WDS_OPEN=true npm run start`"
                },
                "coreModules": {
                    "title": "Core modules",
                    "markdown": "`src/core` contains **core modules** like `bootstrap.js` which bootstraps the entire application. Other important modules like `Http` and `HttpService` is also a part of **core** space. Other space apart from `src/core` is for your custom code. We recommended you not to tamper any files or code of **core** space.\n```\n‚îú‚îÄ‚îÄ core\n|  ‚îú‚îÄ‚îÄ bootstrap.js\n|  ‚îú‚îÄ‚îÄ hoc\n|  |  ‚îú‚îÄ‚îÄ routerOutlet.jsx\n|  |  ‚îú‚îÄ‚îÄ withAsyncComponent.jsx\n|  |  ‚îú‚îÄ‚îÄ withBrowserRouter.jsx\n|  |  ‚îú‚îÄ‚îÄ withRouterConnect.jsx\n|  |  ‚îî‚îÄ‚îÄ withStore.js\n|  ‚îú‚îÄ‚îÄ modules\n|  |  ‚îú‚îÄ‚îÄ Controller.js\n|  |  ‚îú‚îÄ‚îÄ Http.js\n|  |  ‚îú‚îÄ‚îÄ HttpService.js\n|  |  ‚îî‚îÄ‚îÄ MessageBus.js\n|  ‚îî‚îÄ‚îÄ utils\n|     ‚îú‚îÄ‚îÄ debug.js\n|     ‚îú‚îÄ‚îÄ getEmbeddedJSON.js\n|     ‚îú‚îÄ‚îÄ index.js\n|     ‚îî‚îÄ‚îÄ reactRender.js\n```\nHere are few core modules which this framework ship with.\n***\n### bootstrap.js\nThis framework is based on controllers to support multi-page applications. Hence, a bootstrap process needs to be initiated which registers and instantiates individual controllers which then renders React component inside HTML element they belong to.\nHence, `src/index.js` which is entry point of Webpack calls `bootstrap.initialize()` method to start initialization of controllers. Once, bootstrap process is completed, controller's `onReady` lifecycle method is called. Inside `onReady` lifecycle method, controller can render a React component inside HTML element it belongs to.\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n### modules/Controller.js\nThis module exports a `Controller` class that a custom controller can extend. A controller is responsible for rendering a React component inside HTML element it belongs to. When bootstrap process is started, controller's `onInit` lifecycle method is called while `onReady` method is called after bootstrap process is completed.\n```js\nimport { Controller } from 'core/modules/Controller';\nexport class TestController extends Controller {\nconstructor( el, attr ) {\nsuper( el, attr );\n}\n// controller initialized\nonInit() {}\n// controller is ready, render a react component\nonReady() {}\n}\n/*************************************************************/\n// register controller\nTestController.register();\n```\n***\n### modules/Http.js\nThis module provides easy to use API for making AJAX request. We recommend you to use this module inside services rather than using it directly in your application. This module uses [**Axios**](https://github.com/axios/axios) library under the hood for making HTTP requests.\n```js\nimport { Http } from 'core/modules/Http';\n// callback based\nconst cancel = Http.get( axiosConfig, {\nsuccess: ( data ) => {},\nerror: ( error ) => {}\n} );\ncancel();\n// promise based\nconst promise = Http.get( axiosConfig );\npromise.then( handler ).catch( handler );\npromise.cancel();\n```\n***\n### modules/HttpService.js\nThis is RxJS implementation of **Http** module. This module provides easy to use API for making cancellable Ajax request. When an observer is subscribed, AJAX request is sent. When that observer is unsubscribed, request associated with that subscription is aborted.\n```js\nimport { HttpService } from 'core/modules/HttpService';\nconst http = HttpService.create( {\n...defaultConfig\n} );\n// send AJAX request\nconst subscription = http.get( axiosConfig ).subscribe( handler );\n// abort XHR request\nsubscription.unsubscribe();\n```\n***\n### modules/MessageBus.js\nMessageBus is general purpose synchronous pub-sub module.\n```js\nimport { MessageBus } from 'core/modules/MessageBus';\n// listen to message-bus event\nMessageBus.on( 'my_event_name', callbackFunction, thisContext );\n// trigger (dispatch/emit) an event\nMessageBus.trigger( 'my_event_name' );\n// remove a callback from message-bus\nMessageBus.off( 'my_event_name', callbackFunction, thisContext );\n```\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n### hoc/withStore.jsx\nThis higher-order-component returns a component wrapped with redux `Provider`. This way, `Component` and it's children have access to a redux `STORE` you have provided.\n```js\nimport { withStore }  from 'core/hoc/withStore';\nimport { getStore } from 'store';\nconst STORE = getStore();\nconst ComponentWithStore = withStore( Component, STORE, props );\n```\n***\n### hoc/withBrowserRouter.jsx\nThis higher-order-component returns a component wrapped with `BrowserRouter`.\n```js\nimport { withBrowserRouter }  from 'core/hoc/withBrowserRouter';\nconst ComponentWithRouter = withBrowserRouter( Component, props );\n```\n***\n### hoc/withRouterConnect.jsx\nWhen using React Router and React Redux, a component retuned by `connect` higher-order-component doesn't have access to `Route` related props like `history`, `match` and `location` etc. Hence, we need to use `withRouter` higher-order-component again.  `withRouterConnect` higher-order-component does exactly the same.\n```js\nimport { withRouterConnect }  from 'core/hoc/withRouterConnect';\nconst ComponentWithConnect = withRouterConnect( Component, mapStateToProps, mapDispatchToProps );\n```\n***\n### hoc/withAsyncComponent.jsx\nThis higher-order-component implements `loadable` function from `react-lodable`. This HOC returns a component which can be lazy loaded. You must pass a function which returns promise that upon resolution returns a React component. You can optionally pass `LoadingView` component which will be shown until the promise is resolved. You can use Webpack's [`import()`](https://webpack.js.org/api/module-methods/#import-) function to resolve a component.\n```js\nimport { withAsyncComponent }  from 'core/hoc/withAsyncComponent';\nconst ComponentPromiseFunction = () => import( 'Component' );\nconst AsyncComponent = withAsyncComponent( ComponentPromiseFunction, LoadingView );\n```\nThis higher-order-component is used in `router.config.js` when a route needs to be lazy loaded.\n***\n### hoc/routerOutlet.jsx\nThis module exports a function which takes router configuration from `route.config.js` and returns `RouterOutlet` component.\n```js\nimport { routes } from './router.config';\nimport { routerOutlet } from 'core/modules/RouterOutlet';\n// export `RouterOutlet` component\nexport const RouterOutlet = routerOutlet( routes );\n```\n`RouterOutlet` component is used to render routes based on currently activated route (URL path).\n```jsx\n// render routes for `INDEX` page\n<RenderRoutes currentPage=\"INDEX\" />\n// render children routes\n<RenderRoutes currentPage={ props.currentPage } currentRoute={ props.currentRoute } />\n```\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n### utils/reactRender.js\nThis utility function returns a function which can be called with DOM element reference to render a React component. This is used in controllers to render a React component in `onReady` lifecycle method.\n```js\nimport { reactRender } from 'core/utils';\nreactRender( Component, { ...props }, ...children )( DOMElement );\n```\n***\n### utils/getEmbeddedJSON.js\nThis utility function extracts JSON from a script element with given `name` attribute value DOM element context to find script elements. If `context` is empty, it will pick `body` element as context.\n```js\nimport { getEmbeddedJSON } from 'core/utils';\nconst hostsJSON = getEmbeddedJSON( 'hosts', DOMElement );\n```\nAbove will search `<script name=\"hosts\"></script> elements inside some `DOMElement` and return parsed JSON string. This is widely used in controllers to extract some **initial state** or **data**.\n***\n### utils/debug.js\nA utility module to print console logs in browser.\n```js\nimport { debug } from 'core/utils';\ndebug.log( \"log message\", ...messages );\ndebug.info( \"info message\", ...messages );\ndebug.warn( \"warning message\", ...messages );\ndebug.error( \"error message\", ...messages );\n```"
                }
            }
        },
        "meta": {},
        "selected": {}
    }
}